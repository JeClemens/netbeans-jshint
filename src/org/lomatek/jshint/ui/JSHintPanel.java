/*
 *  The MIT License
 * 
 *  Copyright (c) 2011 by Stanislav Lomadurov <lord.rojer@gmail.com>
 * 
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
package org.lomatek.jshint.ui;

import org.lomatek.jshint.JSHintOptions;

final class JSHintPanel extends javax.swing.JPanel {

    private final JSHintOptionsPanelController controller;

    JSHintPanel(JSHintOptionsPanelController controller) {
	this.controller = controller;
	initComponents();
	// TODO listen to changes in form fields and call controller.changed()
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        devel = new javax.swing.JCheckBox();
        browser = new javax.swing.JCheckBox();
        node = new javax.swing.JCheckBox();
        rhino = new javax.swing.JCheckBox();
        widget = new javax.swing.JCheckBox();
        windows = new javax.swing.JCheckBox();
        passfail = new javax.swing.JCheckBox();
        safe = new javax.swing.JCheckBox();
        adsafe = new javax.swing.JCheckBox();
        bitwise = new javax.swing.JCheckBox();
        newcap = new javax.swing.JCheckBox();
        confusion = new javax.swing.JCheckBox();
        tContinue = new javax.swing.JCheckBox();
        debug = new javax.swing.JCheckBox();
        eqeq = new javax.swing.JCheckBox();
        es5 = new javax.swing.JCheckBox();
        evil = new javax.swing.JCheckBox();
        forin = new javax.swing.JCheckBox();
        nomen = new javax.swing.JCheckBox();
        plusplus = new javax.swing.JCheckBox();
        regexp = new javax.swing.JCheckBox();
        undef = new javax.swing.JCheckBox();
        unparam = new javax.swing.JCheckBox();
        sloppy = new javax.swing.JCheckBox();
        sub = new javax.swing.JCheckBox();
        vars = new javax.swing.JCheckBox();
        white = new javax.swing.JCheckBox();
        css = new javax.swing.JCheckBox();
        cap = new javax.swing.JCheckBox();
        on = new javax.swing.JCheckBox();
        fragment = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jUnselectAll = new javax.swing.JButton();
        jSelectAll = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        indent = new javax.swing.JTextField();
        maxlen = new javax.swing.JTextField();
        maxerr = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        preDef = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(devel, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.devel.text")); // NOI18N
        devel.setToolTipText(org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.devel.toolTipText")); // NOI18N
        devel.setName("devel"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browser, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.browser.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(node, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.node.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(rhino, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.rhino.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(widget, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.widget.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(windows, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.windows.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(passfail, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.passfail.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(safe, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.safe.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(adsafe, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.adsafe.text")); // NOI18N
        adsafe.setToolTipText(org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.adsafe.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(bitwise, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.bitwise.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(newcap, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.newcap.text")); // NOI18N
        newcap.setToolTipText(org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.newcap.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(confusion, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.confusion.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(tContinue, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.tContinue.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(debug, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.debug.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(eqeq, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.eqeq.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(es5, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.es5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(evil, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.evil.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(forin, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.forin.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nomen, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.nomen.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(plusplus, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.plusplus.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(regexp, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.regexp.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(undef, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.undef.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(unparam, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.unparam.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(sloppy, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.sloppy.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(sub, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.sub.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(vars, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.vars.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(white, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.white.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(css, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.css.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cap, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.cap.text")); // NOI18N
        cap.setToolTipText(org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.cap.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(on, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.on.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fragment, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.fragment.text")); // NOI18N
        fragment.setToolTipText(org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.fragment.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jUnselectAll, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.jUnselectAll.text")); // NOI18N
        jUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUnselectAllActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jSelectAll, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.jSelectAll.text")); // NOI18N
        jSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectAllActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.jLabel1.text")); // NOI18N

        indent.setText(org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.indent.text")); // NOI18N
        indent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indentActionPerformed(evt);
            }
        });

        maxlen.setText(org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.maxlen.text")); // NOI18N

        maxerr.setText(org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.maxerr.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.jLabel3.text")); // NOI18N

        preDef.setColumns(20);
        preDef.setRows(5);
        jScrollPane1.setViewportView(preDef);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.jLabel4.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jUnselectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSelectAll))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(maxerr, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxlen, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(indent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browser)
                            .addComponent(devel)
                            .addComponent(node)
                            .addComponent(rhino)
                            .addComponent(widget)
                            .addComponent(windows)
                            .addComponent(passfail)
                            .addComponent(safe)
                            .addComponent(adsafe))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plusplus)
                            .addComponent(nomen)
                            .addComponent(newcap)
                            .addComponent(confusion)
                            .addComponent(bitwise)
                            .addComponent(tContinue)
                            .addComponent(debug)
                            .addComponent(eqeq)
                            .addComponent(es5)
                            .addComponent(evil)
                            .addComponent(forin))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fragment)
                            .addComponent(on)
                            .addComponent(cap)
                            .addComponent(undef)
                            .addComponent(regexp)
                            .addComponent(unparam)
                            .addComponent(sloppy)
                            .addComponent(sub)
                            .addComponent(vars)
                            .addComponent(white)
                            .addComponent(css)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(regexp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(undef)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unparam)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sloppy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sub)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(vars)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(white)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(css)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(on)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fragment))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bitwise)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(confusion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tContinue)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(debug)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(eqeq)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(es5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(evil)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(forin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(newcap))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(devel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(browser)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(node)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rhino)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(widget)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(windows)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passfail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(safe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(adsafe)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(plusplus)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jUnselectAll)
                    .addComponent(jSelectAll))
                .addGap(16, 16, 16)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxlen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxerr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void indentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indentActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_indentActionPerformed

    private void jUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUnselectAllActionPerformed
	devel.setSelected(false);
	bitwise.setSelected(false);
	regexp.setSelected(false);
	browser.setSelected(false);
	confusion.setSelected(false);
	undef.setSelected(false);
	node.setSelected(false);
	tContinue.setSelected(false);
	unparam.setSelected(false);
	rhino.setSelected(false);
	debug.setSelected(false);
	sloppy.setSelected(false);
	widget.setSelected(false);
	eqeq.setSelected(false);
	sub.setSelected(false);
	windows.setSelected(false);
	es5.setSelected(false);
	vars.setSelected(false);
	evil.setSelected(false);
	white.setSelected(false);
	passfail.setSelected(false);
	forin.setSelected(false);
	css.setSelected(false);
	newcap.setSelected(false);
	cap.setSelected(false);
	safe.setSelected(false);
	nomen.setSelected(false);
	on.setSelected(false);
	adsafe.setSelected(false);
	plusplus.setSelected(false);
	fragment.setSelected(false);
    }//GEN-LAST:event_jUnselectAllActionPerformed

    private void jSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectAllActionPerformed
	devel.setSelected(true);
	bitwise.setSelected(true);
	regexp.setSelected(true);
	browser.setSelected(true);
	confusion.setSelected(true);
	undef.setSelected(true);
	node.setSelected(true);
	tContinue.setSelected(true);
	unparam.setSelected(true);
	rhino.setSelected(true);
	debug.setSelected(true);
	sloppy.setSelected(true);
	widget.setSelected(true);
	eqeq.setSelected(true);
	sub.setSelected(true);
	windows.setSelected(true);
	es5.setSelected(true);
	vars.setSelected(true);
	evil.setSelected(true);
	white.setSelected(true);
	passfail.setSelected(true);
	forin.setSelected(true);
	css.setSelected(true);
	newcap.setSelected(true);
	cap.setSelected(true);
	safe.setSelected(true);
	nomen.setSelected(true);
	on.setSelected(true);
	adsafe.setSelected(true);
	plusplus.setSelected(true);
	fragment.setSelected(true);
    }//GEN-LAST:event_jSelectAllActionPerformed

    void load() {
	devel.setSelected(JSHintOptions.getInstance().getOption("devel"));
	bitwise.setSelected(JSHintOptions.getInstance().getOption("bitwise"));
	regexp.setSelected(JSHintOptions.getInstance().getOption("regexp"));
	browser.setSelected(JSHintOptions.getInstance().getOption("browser"));
	confusion.setSelected(JSHintOptions.getInstance().getOption("confusion"));
	undef.setSelected(JSHintOptions.getInstance().getOption("undef"));
	node.setSelected(JSHintOptions.getInstance().getOption("node"));
	tContinue.setSelected(JSHintOptions.getInstance().getOption("continue"));
	unparam.setSelected(JSHintOptions.getInstance().getOption("unparam"));
	rhino.setSelected(JSHintOptions.getInstance().getOption("rhino"));
	debug.setSelected(JSHintOptions.getInstance().getOption("debug"));
	sloppy.setSelected(JSHintOptions.getInstance().getOption("sloppy"));
	widget.setSelected(JSHintOptions.getInstance().getOption("widget"));
	eqeq.setSelected(JSHintOptions.getInstance().getOption("eqeq"));
	sub.setSelected(JSHintOptions.getInstance().getOption("sub"));
	windows.setSelected(JSHintOptions.getInstance().getOption("windows"));
	es5.setSelected(JSHintOptions.getInstance().getOption("es5"));
	vars.setSelected(JSHintOptions.getInstance().getOption("vars"));
	evil.setSelected(JSHintOptions.getInstance().getOption("evil"));
	white.setSelected(JSHintOptions.getInstance().getOption("white"));
	passfail.setSelected(JSHintOptions.getInstance().getOption("passfail"));
	forin.setSelected(JSHintOptions.getInstance().getOption("forin"));
	css.setSelected(JSHintOptions.getInstance().getOption("css"));
	newcap.setSelected(JSHintOptions.getInstance().getOption("newcap"));
	cap.setSelected(JSHintOptions.getInstance().getOption("cap"));
	safe.setSelected(JSHintOptions.getInstance().getOption("safe"));
	nomen.setSelected(JSHintOptions.getInstance().getOption("nomen"));
	on.setSelected(JSHintOptions.getInstance().getOption("on"));
	adsafe.setSelected(JSHintOptions.getInstance().getOption("adsafe"));
	plusplus.setSelected(JSHintOptions.getInstance().getOption("plusplus"));
	fragment.setSelected(JSHintOptions.getInstance().getOption("fragment"));
	preDef.setText(JSHintOptions.getInstance().getOption("predef", ""));
	try {
	    maxerr.setText(Integer.toString(JSHintOptions.getInstance().getOption("maxerr",50)));
	    indent.setText(Integer.toString(JSHintOptions.getInstance().getOption("indent",4)));
	    maxlen.setText(Integer.toString(JSHintOptions.getInstance().getOption("maxlen",0)));   
	} catch (NumberFormatException e) {
            //e.printStackTrace();
            throw new RuntimeException(e);
        } 
    }

    void store() {
	JSHintOptions.getInstance().setOption("adsafe", adsafe.isSelected());
	JSHintOptions.getInstance().setOption("bitwise", bitwise.isSelected());
	JSHintOptions.getInstance().setOption("browser", browser.isSelected());
	JSHintOptions.getInstance().setOption("cap", cap.isSelected());
	JSHintOptions.getInstance().setOption("confusion", confusion.isSelected());
	JSHintOptions.getInstance().setOption("css", css.isSelected());
	JSHintOptions.getInstance().setOption("debug", debug.isSelected());
	JSHintOptions.getInstance().setOption("devel", devel.isSelected());
	JSHintOptions.getInstance().setOption("eqeq", eqeq.isSelected());
	JSHintOptions.getInstance().setOption("es5", es5.isSelected());
	JSHintOptions.getInstance().setOption("evil", evil.isSelected());
	JSHintOptions.getInstance().setOption("forin", forin.isSelected());
	JSHintOptions.getInstance().setOption("fragment", fragment.isSelected());
	JSHintOptions.getInstance().setOption("newcap", newcap.isSelected());
	JSHintOptions.getInstance().setOption("node", node.isSelected());
	JSHintOptions.getInstance().setOption("nomen", nomen.isSelected());
	JSHintOptions.getInstance().setOption("on", on.isSelected());
	JSHintOptions.getInstance().setOption("passfail", passfail.isSelected());
	JSHintOptions.getInstance().setOption("plusplus", plusplus.isSelected());
	JSHintOptions.getInstance().setOption("regexp", regexp.isSelected());
	JSHintOptions.getInstance().setOption("rhino", rhino.isSelected());
	JSHintOptions.getInstance().setOption("safe", safe.isSelected());
	JSHintOptions.getInstance().setOption("sloppy", sloppy.isSelected());
	JSHintOptions.getInstance().setOption("sub", sub.isSelected());
	JSHintOptions.getInstance().setOption("continue", tContinue.isSelected());
	JSHintOptions.getInstance().setOption("undef", undef.isSelected());
	JSHintOptions.getInstance().setOption("unparam", unparam.isSelected());
	JSHintOptions.getInstance().setOption("vars", vars.isSelected());
	JSHintOptions.getInstance().setOption("white", white.isSelected());
	JSHintOptions.getInstance().setOption("widget", widget.isSelected());
	JSHintOptions.getInstance().setOption("windows", windows.isSelected());
	JSHintOptions.getInstance().setOption("predef", preDef.getText());
	try {
	    JSHintOptions.getInstance().setOption("maxerr", Integer.parseInt(maxerr.getText()));
	    JSHintOptions.getInstance().setOption("indent", Integer.parseInt(indent.getText()));
	    JSHintOptions.getInstance().setOption("maxlen", Integer.parseInt(maxlen.getText()));
	} catch (NumberFormatException e) {
            //e.printStackTrace();
            throw new RuntimeException(e);
        }
	
	//JSHintOptions.getInstance().getOptions();
	JSHintOptions.getInstance().removeOptions();
    }

    boolean valid() {
	// TODO check whether form is consistent and complete
	return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox adsafe;
    private javax.swing.JCheckBox bitwise;
    private javax.swing.JCheckBox browser;
    private javax.swing.JCheckBox cap;
    private javax.swing.JCheckBox confusion;
    private javax.swing.JCheckBox css;
    private javax.swing.JCheckBox debug;
    private javax.swing.JCheckBox devel;
    private javax.swing.JCheckBox eqeq;
    private javax.swing.JCheckBox es5;
    private javax.swing.JCheckBox evil;
    private javax.swing.JCheckBox forin;
    private javax.swing.JCheckBox fragment;
    private javax.swing.JTextField indent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jSelectAll;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jUnselectAll;
    private javax.swing.JTextField maxerr;
    private javax.swing.JTextField maxlen;
    private javax.swing.JCheckBox newcap;
    private javax.swing.JCheckBox node;
    private javax.swing.JCheckBox nomen;
    private javax.swing.JCheckBox on;
    private javax.swing.JCheckBox passfail;
    private javax.swing.JCheckBox plusplus;
    private javax.swing.JTextArea preDef;
    private javax.swing.JCheckBox regexp;
    private javax.swing.JCheckBox rhino;
    private javax.swing.JCheckBox safe;
    private javax.swing.JCheckBox sloppy;
    private javax.swing.JCheckBox sub;
    private javax.swing.JCheckBox tContinue;
    private javax.swing.JCheckBox undef;
    private javax.swing.JCheckBox unparam;
    private javax.swing.JCheckBox vars;
    private javax.swing.JCheckBox white;
    private javax.swing.JCheckBox widget;
    private javax.swing.JCheckBox windows;
    // End of variables declaration//GEN-END:variables
}
